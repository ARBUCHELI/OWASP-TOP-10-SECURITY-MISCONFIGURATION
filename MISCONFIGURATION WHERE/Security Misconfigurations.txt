# SECURITY MISCONFIGURATIONS
----------------------------

* An Introduction to Security Misconfigurations
-----------------------------------------------
When we think about secure development, it is common to immediately jump to secure coding, sanitization, and code-level access controls. Unfortunately, in this day and age, application 
stacks rarely exist in a space that only includes developer-written code. Rather, developers will leverage popular frameworks to help expedite the coding, debugging, and production 
process. To better support developers, many tools and frameworks will include functionality far past basic code logic, and many will include debugging capabilities, administration 
portals, and other useful services designed to aid during development.

While these features may be incredibly useful when developing, they can pose a significant risk if not properly controlled once a system moves to a production environment. Failure to 
properly control these features and others may lead to security misconfigurations.

Within the OWASP documentation, there are several common misconfigurations that developers need to consider, such as:

	. Unnecessary features enabled
	. Default accounts enabled and unchanged
	. Verbose Error Handling
	. Old libraries with out-of-date software
	. A lack of security settings and headers

The impact of those misconfigurations can vary widely. They can range from information disclosure to complete system takeovers.

The following lesson will explore a Python web application vulnerable to several security misconfigurations.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Exploring Common Security Misconfigurations
---------------------------------------------
In our current example, we have a Python web application. It may not be clear what the app’s purpose is, but we’ll see how quickly we can learn about the application due to several basic 
misconfigurations.

Let’s take some time to interact with the application, probing for potential security issues. Try any of the following:

	. In the browser, try sending some basic requests to the system.
	. In the browser, try sending a handful of different strings. Submit a string such as “test”, “;”, or “/“.

By doing any of the above tasks, we should be able to identify a few common security misconfigurations.

Our first serious security misconfiguration is that some unnecessary features are enabled. If we send a /GET request to this server by replacing the browser’s URL with localhost:8080/, we 
should notice that the server returns important information. One portion includes information about the operating system. This includes the name, version, and the underlying architecture. 

The combination of this information constitutes a serious information disclosure issue. Data included in this response could aid an attacker in various ways. With knowledge of the 
operating system, an attacker could easily look for known exploits and vulnerabilities. A system takeover will be trivial if the operating system is vulnerable to a public exploit.

All of this information may help an attacker compromise the underlying operating system.

Continuing, we can also see another serious security misconfiguration related to the operating system execution. The server returns a verbose stack trace if we insert the following 
ping -n4 localhost. As with the other debugging data returned, this also constitutes a serious information disclosure risk. By revealing a stack trace in this manner, an attacker can 
easily glean information about a system’s operational flow and logic. Understanding this gives an attacker a huge advantage when targeting your code.

* Response
----------
flask.cli.NoAppException
flask.cli.NoAppException: Could not import "app".

Traceback (most recent call last)
File "/usr/local/lib/python3.6/dist-packages/flask/cli.py", line 240, in locate_app
__import__(module_name)
During handling of the above exception, another exception occurred:
File "/usr/local/lib/python3.6/dist-packages/flask/cli.py", line 343, in __call__
rv = self._load_unlocked()
File "/usr/local/lib/python3.6/dist-packages/flask/cli.py", line 330, in _load_unlocked
self._app = rv = self.loader()
File "/usr/local/lib/python3.6/dist-packages/flask/cli.py", line 388, in load_app
app = locate_app(self, import_name, name)
File "/usr/local/lib/python3.6/dist-packages/flask/cli.py", line 250, in locate_app
raise NoAppException('Could not import "{name}".'.format(name=module_name))
flask.cli.NoAppException: Could not import "app".
The debugger caught an exception in your WSGI application. You can now look at the traceback which led to the error.
To switch between the interactive traceback and the plaintext one, you can click on the "Traceback" headline. From the text traceback you can also create a paste of it. For code execution mouse-over the frame you want to debug and click on the console icon on the right side.

You can execute arbitrary Python code in the stack frames and there are some extra helpers available for introspection:

dump() shows all variables in the frame
dump(obj) dumps all that's known about the object
Brought to you by DON'T PANIC, your friendly Werkzeug powered traceback interpreter.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Mitigating Common Security Misconfigurations
----------------------------------------------
Now that we’ve seen an example of poorly configured code, let’s look at a more secure version that does not suffer from these same security misconfigurations.

A quick review of the code finds that the operating system diagnostic page was removed entirely, and the error handling components have been stripped down to exclude any verbose error 
messages. This combination greatly reduces the risk of information disclosure issues.

In general, best practices related to security misconfigurations will include the following:

	. Disable any detailed stack trace/error logs
	. Remove/disable any debug/non-necessary services
	.Remove or modify any default accounts/credentials
	. Update your software

While the exact process behind fixing security misconfigurations will vary greatly based on the language, library, and systems in use, the final output is the same. Remove any unnecessary 
features that may provide attackers with useful tools or information. Remember, tools that make a developer’s or administrator’s life easier can also be abused by an attacker to damage a 
system more effectively.

app.py
------
import subprocess
from flask import Flask, request, jsonify
import platform

app = Flask(__name__)

@app.route('/send_command', methods=['GET'])
def send_command():
    response = """Please Enter The Command "ping -n4 localhost" to check system status:
        <form method="post" action="/execute">
             <input id="command" type="text" class="searchField" name="command" placeholder="Enter Command: ">
             <input type="submit" class="submit" value="Submit"> 
        </form>
    """
    return response

@app.route('/execute', methods=['POST'])
def execute_command():
    command = request.form.get('command')
    if not command or command.strip() == '':
        return "Command parameter is missing or empty.", 400

    if 'localhost' not in command:
        return "Invalid command parameter.", 400

    try:
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        output, _ = process.communicate()
        exit_code = process.returncode

        if exit_code == 0:
            return output
        else:
            return "Command execution error.", 500
    except Exception:
        return "Failed to execute command.", 500

@app.route('/', methods=['GET'])
def welcome():
    response = "WELCOME!"

    return response

if __name__ == '__main__':
    app.run(host='localhost', port=8080)

secured_app.java
----------------
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class CommandExecutorServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;
    
    private static final String LOCALHOST = "localhost";

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String command = request.getParameter("command");
        
        if (command != null && command.contains(LOCALHOST)) {
            try {
                Process process = Runtime.getRuntime().exec(command);
                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                String line;
                while ((line = reader.readLine()) != null) {
                    response.getWriter().append(line).append("\n");
                }
            } catch (IOException e) {
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "An error occurred while executing the command.");
                e.printStackTrace();
            }
        } else {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Command must contain the string 'localhost'.");
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Conclusion
------------
While a basic stack trace error message may not seem dangerous, a skilled attacker can abuse the information revealed here to better target, exploit, and damage a system. Any information 
or access that an attacker can obtain is a valuable resource that can have unfounded and unpredictable effects. Security misconfigurations can take on many forms, but we can generally 
address their forms by restricting access to information and built-in tools.

